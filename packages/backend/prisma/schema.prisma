// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CommandType {
  USER_DEFINED
  DEFAULT
}

model User {
  uid              String    @id @default(cuid())
  displayName      String?
  email            String?   @unique
  photoURL         String?
  refreshToken     String?
  providerAccounts Account[]
  createdOn        DateTime  @default(now()) @db.Timestamp(3)
}

model Account {
  id                   String   @id @default(cuid())
  userId               String
  user                 User     @relation(fields: [userId], references: [uid], onDelete: Cascade)
  provider             String
  providerAccountId    String
  providerRefreshToken String?
  providerAccessToken  String?
  providerScope        String?
  loggedIn             DateTime @default(now()) @db.Timestamp(3)

  @@unique(fields: [provider, providerAccountId], name: "verifyProviderAccount")
}

model Command {
  id         String          @id @default(cuid())
  title      String
  cmd        String
  type       CommandType
  isInputAllowed Boolean         @default(false)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  scripts    ScriptCommand[]
}

model Script {
  id            String          @id @default(cuid())
  name          String
  updateCounter Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  commands      ScriptCommand[]
}

model ScriptCommand {
  id        String          @id @default(cuid())
  command   Command         @relation(fields: [commandId], references: [id], onDelete: Cascade)
  commandId String
  script    Script          @relation(fields: [scriptId], references: [id], onDelete: Cascade)
  scriptId  String
  order     Int
  args      String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  outputs   CommandOutput[]

  @@unique([commandId, scriptId])
}

model CommandOutput {
  id              String        @id @default(cuid())
  scriptCommandId String
  scriptCommand   ScriptCommand @relation(fields: [scriptCommandId], references: [id])
  output          String
  scriptId        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
